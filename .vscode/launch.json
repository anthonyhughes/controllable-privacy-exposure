{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Stats",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/stats_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            }
        },
        {
            "name": "Psuedo",
            "type": "debugpy",
            "request": "launch",
            "program": "pseudonymizer/pseudonymize.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "cnn",
                "--plib", "spacy"
            ]
        },
        {
            "name": "Legal - Ollama Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/ollama_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "legal_court",
                "--model", "llama3.1:70b",
            ]
        },
        {
            "name": "CNN - Ollama Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/ollama_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "cnn",
                "--model", "llama3.1:70b",
            ],
        },
        {
            "name": "OpenAI Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/openai_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "cnn",
                "--model", "gpt-4o-mini",
            ],
            "envFile": "${workspaceFolder}/.env"
        },
        {
            "name": "OpenAI Batch Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/openai_batch_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "brief_hospital_course",
                "--model", "gpt-4o-mini",
                "--flag", "batch"
            ],
            "envFile": "${workspaceFolder}/.env"
        },
        {
            "name": "OpenAI Check Batch Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/openai_batch_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "legal_court",
                "--model", "gpt-4o-mini",
                "--flag", "check",
                "--job_id", "batch_eXh6l7GfKVM6n31ngih9flKg"
            ],
            "envFile": "${workspaceFolder}/.env"
        },
        {
            "name": "OpenAI Retrieve Batch Results Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/openai_batch_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "cnn",
                "--model", "gpt-4o-mini",
                "--flag", "retrieve",
                "--file_id", "file-vrur4COLH2NX5fKp5ybemOyc"
            ],
            "envFile": "${workspaceFolder}/.env"
        },        
        {
            "name": "Claude Sonnet Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/claude_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--task", "cnn",
                "--model", "claude-3-5-sonnet-20240620",
            ],
            "envFile": "${workspaceFolder}/.env"
        },
        {
            "name": "Unsloth Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/unsloth_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}",
                "CUDA_VISIBLE_DEVICES": "1"
            },
            "args": [
                "--task", "legal_court",
                "--model", "mistral-7b-instruct-v0.3-bnb-4bit",
            ],
            "envFile": "${workspaceFolder}/.env"
        },
        {
            "name": "Utility Eval Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/eval_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                // "--tasks", "all",
                "--tasks", "legal_court",
                // "--tasks", "cnn",
                // "--model", "llama-3-8b-Instruct-bnb-4bit",
                // "--model", "Meta-Llama-3.1-70B-Instruct-bnb-4bit",
                "--model", "mistral-7b-instruct-v0.3-bnb-4bit",
                "--eval_type", "utility"
            ],
        },
        {
            "name": "Privacy Eval Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/eval_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--tasks", "cnn",
                "--model", "llama-3-8b-Instruct-bnb-4bit",
                "--eval_type", "privacy"
            ],
        },
        {
            "name": "Reidentif Eval Pipeline",
            "type": "debugpy",
            "request": "launch",
            "program": "pipelines/eval_pipeline.py",
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}",
            "env": {
                "PYTHONPATH": "${cwd}"
            },
            "args": [
                "--tasks", "all",
                "--model", "all",
                "--eval_type", "reidentification"
            ],
        }
    ]
}